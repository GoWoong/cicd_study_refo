      name: Build and Deploy

      on:
        push:
          branches: [ main ]

      env:
        AWS_REGION: ap-northeast-2
        ECR_REPOSITORY: fastapi_file_repo
        IMAGE_TAG: latest
        IMAGE_NAME: my-python-app
        S3_BUCKET: ko-appspec-bucket-test
        S3_KEY: deploy.zip
        CODEDEPLOY_APPLICATION: cicd_test_app_ko
        CODEDEPLOY_DEPLOYMENT_GROUP: cicd_deploy_group

      jobs:
        build:
          runs-on: ubuntu-latest

          steps:
            - name: Checkout code
              uses: actions/checkout@v2

            - name: Zip AppSpec and Scripts folders
              run: |
                cd ..
                zip -r deploy.zip . -i deploy

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ap-northeast-2

            - name: Upload zip file to s3
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-region: ${{ env.AWS_REGION }}
                role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
              id: configure-aws

            - name: Upload deploy file to S3
              run: aws s3 cp /home/runner/work/cicd_study_refo/deploy.zip s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }}

            - name: AWS ECR 로그인
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1


            - name: Build Docker image and push to ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                IMAGE_TAG: ${{ env.IMAGE_TAG }}
              run: |
                aws ecr-public get-login-password --region ap-north-east2 | docker login --username AWS --password-stdin public.ecr.aws/e6a5s7p4
                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push --timeout 300 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                
            - name: Create CodeDeploy Deployment
              env:
                AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
                CODEDEPLOY_APPLICATION: ${{ env.CODEDEPLOY_APPLICATION }}
                CODEDEPLOY_DEPLOYMENT_GROUP: ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }}
                ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
                ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
                IMAGE_TAG: ${{ env.IMAGE_TAG }}
              run: |
                # Download the appspec file from S3
                aws s3 cp s3://${{ env.S3_BUCKET }}/${{ env.S3_KEY }} app.zip
                unzip app.zip deploy/appspec.yaml

                # Create a new deployment
                aws deploy create-deployment \
                  --application-name $CODEDEPLOY_APPLICATION \
                  --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
                  --description "Deploying version $IMAGE_TAG of $ECR_REPOSITORY" \
                  --revision revisionType=S3,s3Location="{bucket=${S3_BUCKET},key=${S3_KEY}}" \
                  --file-exists-behavior OVERWRITE \
                  --ignore-application-stop-failures
